
--Obtener Paises

CREATE PROCEDURE `ObtenerPaises`()
BEGIN
    -- Seleccionar todos los países
    SELECT * FROM Paises WHERE deleted = 0;  -- Asegurarse de no incluir países eliminados
END;

--Agregar Usuarios

CREATE PROCEDURE `AgregarPais`(
    IN p_id INT,
    IN p_nombre NVARCHAR(255)
)
BEGIN
    -- Verificar si el país ya existe por su ID
    IF p_id IS NOT NULL AND EXISTS (SELECT * FROM Paises WHERE id = p_id) THEN
        -- Actualizar el registro si el país existe
        UPDATE Paises 
        SET nombre = p_nombre,
            deleteDate = NULL,  -- Restablecer deleteDate si el país estaba marcado como eliminado
            deleted = 0
        WHERE id = p_id;
    ELSE
        -- Insertar un nuevo registro si el país no existe
        INSERT INTO Paises (nombre, createDate, deleteDate, deleted)
        VALUES (p_nombre, CURRENT_TIMESTAMP, NULL, 0);

        -- Obtener el último ID insertado
        SELECT LAST_INSERT_ID() AS nuevo_id;
    END IF;
END

 --Agregar Cliente
CREATE PROCEDURE `AgregarCliente`(
    IN p_id BIGINT,
    IN p_dni INT,
    IN p_cuil INT,
    IN p_nombre NVARCHAR(255),
    IN p_apellido NVARCHAR(255),
    IN p_sexo NVARCHAR(50),
    IN p_id_pais_nacimiento INT,
    IN p_fecha_nacimiento DATE,
    IN p_id_usuario BIGINT
)
BEGIN
    -- Verificar si el cliente ya existe
    IF p_id IS NOT NULL AND EXISTS (SELECT * FROM Clientes WHERE id = p_id) THEN
        -- Actualizar el registro si el cliente existe
        UPDATE Clientes 
        SET dni = p_dni,
            cuil = p_cuil,
            nombre = p_nombre,
            apellido = p_apellido,
            sexo = p_sexo,
            id_pais_nacimiento = p_id_pais_nacimiento,
            fecha_nacimiento = p_fecha_nacimiento,
            id_usuario = p_id_usuario,
            deleteDate = NULL,  -- Para asegurar que el registro no esté marcado como eliminado
            deleted = 0
        WHERE id = p_id;
    ELSE
        -- Insertar un nuevo registro si el cliente no existe
        INSERT INTO Clientes (
            dni, cuil, nombre, apellido, sexo, id_pais_nacimiento, fecha_nacimiento, id_usuario, deleteDate, deleted, createDate
        ) VALUES (
            p_dni, p_cuil, p_nombre, p_apellido, p_sexo, p_id_pais_nacimiento, p_fecha_nacimiento, p_id_usuario, NULL, 0, CURRENT_TIMESTAMP
        );

        -- Obtener el último ID insertado
        SELECT LAST_INSERT_ID() AS nuevo_id;
    END IF;
END

--Obtener Usuarios
CREATE PROCEDURE `ObtenerUsuarios`()
BEGIN
    -- Seleccionar todos los Usuarios
    SELECT * FROM Usuarios WHERE deleted = 0;  
END


--Agregar Usuarios

CREATE  PROCEDURE `AgregarUsuario`(
    IN p_id BIGINT,
    IN p_usuario NVARCHAR(255),
    IN p_password NVARCHAR(255),
    IN p_nombre NVARCHAR(255),
    IN p_admin BOOLEAN
)
BEGIN
    
    IF p_id IS NOT NULL AND EXISTS (SELECT * FROM Usuarios WHERE id = p_id) THEN
    
        UPDATE Usuarios 
        SET usuario = p_usuario,
            password = p_password,
            nombre = p_nombre,
            admin = p_admin,
            deleteDate = NULL, 
            deleted = 0
        WHERE id = p_id;
    ELSE
       
        INSERT INTO Usuarios (
            usuario, password, nombre, admin, deleteDate, deleted, createDate
        ) VALUES (
            p_usuario, p_password, p_nombre, p_admin, NULL, 0, CURRENT_TIMESTAMP
        );

      
        SELECT LAST_INSERT_ID() AS nuevo_id;
    END IF;
END